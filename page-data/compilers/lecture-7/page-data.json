{
    "componentChunkName": "component---src-pages-markdown-remark-frontmatter-slug-tsx",
    "path": "/compilers/lecture-7/",
    "result": {"data":{"markdownRemark":{"html":"<h1>Lecture 7</h1>\n<h2>Top-down Allocator</h2>\n<p>The idea:</p>\n<ul>\n<li>Machine has <em>k</em> physical registers</li>\n<li>Keep the “busiest” values in an assigned register</li>\n<li>Use the feasible (reserved) set, <em>F</em>, for the rest</li>\n<li><em>F</em> is the minimal set of registers needed to execute any instruction with all operands in memory\n<ul>\n<li>Move values with no assigned register from/to memory by adding LOADs and STOREs (SPILL CODE)</li>\n</ul>\n</li>\n</ul>\n<p>Basic algorithm (not graph coloring!)</p>\n<ul>\n<li>Rank values by number of occurrences (or some other metric)</li>\n<li>Allocate first k to F values to registers</li>\n<li>Rewrite code (with spill code) to reflect these choices</li>\n</ul>\n<h3>Example</h3>\n<p>Take the following ILOC code with the live ranges (on exit) for each virtual register</p>\n<div class=\"gatsby-highlight\" data-language=\"pascal\"><pre class=\"language-pascal\"><code class=\"language-pascal\">loadI   <span class=\"token number\">1028</span>    <span class=\"token operator\">=</span><span class=\"token operator\">></span> r1 <span class=\"token comment\">// r1</span>\nload    r1      <span class=\"token operator\">=</span><span class=\"token operator\">></span> r2 <span class=\"token comment\">// r1 r2</span>\nmult    r1<span class=\"token punctuation\">,</span>r2   <span class=\"token operator\">=</span><span class=\"token operator\">></span> r3 <span class=\"token comment\">// r1 r2 r3</span>\nloadI   <span class=\"token number\">5</span>       <span class=\"token operator\">=</span><span class=\"token operator\">></span> r4 <span class=\"token comment\">// r1 r2 r3 r4              -- MAXLIVE = 4</span>\nsub     r4<span class=\"token punctuation\">,</span>r2   <span class=\"token operator\">=</span><span class=\"token operator\">></span> r5 <span class=\"token comment\">// r1    r3    r5</span>\nloadI   <span class=\"token number\">8</span>       <span class=\"token operator\">=</span><span class=\"token operator\">></span> r6 <span class=\"token comment\">// r1    r3    r5 r6        -- MAXLIVE = 4</span>\nmult    r5<span class=\"token punctuation\">,</span>r6   <span class=\"token operator\">=</span><span class=\"token operator\">></span> r7 <span class=\"token comment\">// r1    r3          r7</span>\nsub     r7<span class=\"token punctuation\">,</span>r3   <span class=\"token operator\">=</span><span class=\"token operator\">></span> r8 <span class=\"token comment\">// r1                   r8</span>\nstore   r8      <span class=\"token operator\">=</span><span class=\"token operator\">></span> r1 <span class=\"token comment\">//</span></code></pre></div>\n<ul>\n<li>\n<p>3 physical registers to allocate: <em>ra, rb, rc</em></p>\n</li>\n<li>\n<p>1 selected register: f1 (feasible set)</p>\n<ul>\n<li>Note: ILOC needs larger F set</li>\n<li><em>k = 4, F = 1, (k-F) = 3</em></li>\n</ul>\n</li>\n<li>\n<p>Consider statements with MAXLIVE > (k-F) (basic algorithm)</p>\n</li>\n<li>\n<p>Spill heuristic</p>\n<ul>\n<li>\n<ol>\n<li>Number of occurrences of virtual register</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>Length of live range (tie breaker)</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Virtual Register</th>\n<th>Number of occurrences</th>\n<th>Length of live range</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>r1</td>\n<td>4</td>\n<td>8</td>\n</tr>\n<tr>\n<td>r2</td>\n<td>3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>r3</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>r4</td>\n<td>2</td>\n<td>1</td>\n</tr>\n<tr>\n<td>r5</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>r6,r7,r8</td>\n<td>2</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>In our case, we will spill <code class=\"language-text\">r3</code> (meaning our MAXLIVE &#x3C;= k)</p>\n<div class=\"gatsby-highlight\" data-language=\"pascal\"><pre class=\"language-pascal\"><code class=\"language-pascal\">loadI   <span class=\"token number\">1028</span>    <span class=\"token operator\">=</span><span class=\"token operator\">></span> r1       <span class=\"token comment\">// r1</span>\nload    r1      <span class=\"token operator\">=</span><span class=\"token operator\">></span> r2       <span class=\"token comment\">// r1 r2</span>\nmult    r1<span class=\"token punctuation\">,</span>r2   <span class=\"token operator\">=</span><span class=\"token operator\">></span> f1       <span class=\"token comment\">// r1 r2</span>\nstoreAI f1      <span class=\"token operator\">=</span><span class=\"token operator\">></span> r0<span class=\"token punctuation\">,</span> <span class=\"token operator\">@</span>r3  <span class=\"token comment\">// ** spill code</span>\nloadI   <span class=\"token number\">5</span>       <span class=\"token operator\">=</span><span class=\"token operator\">></span> r4       <span class=\"token comment\">// r1 r2    r4              -- MAXLIVE = 3</span>\nsub     r4<span class=\"token punctuation\">,</span>r2   <span class=\"token operator\">=</span><span class=\"token operator\">></span> r5       <span class=\"token comment\">// r1          r5</span>\nloadI   <span class=\"token number\">8</span>       <span class=\"token operator\">=</span><span class=\"token operator\">></span> r6       <span class=\"token comment\">// r1          r5 r6        -- MAXLIVE = 3</span>\nmult    r5<span class=\"token punctuation\">,</span>r6   <span class=\"token operator\">=</span><span class=\"token operator\">></span> r7       <span class=\"token comment\">// r1                r7</span>\nloadAI  r0<span class=\"token punctuation\">,</span><span class=\"token operator\">@</span>r3  <span class=\"token operator\">=</span><span class=\"token operator\">></span> f1       <span class=\"token comment\">// ** spill code</span>\nsub     r7<span class=\"token punctuation\">,</span>r3   <span class=\"token operator\">=</span><span class=\"token operator\">></span> r8       <span class=\"token comment\">// r1                   r8</span>\nstore   r8      <span class=\"token operator\">=</span><span class=\"token operator\">></span> r1       <span class=\"token comment\">//</span></code></pre></div>\n<h2>Spill Code</h2>\n<ul>\n<li>A virtual register is spilled by using only registers from the feasible set (F), not the allocated set (k-F) = {ra, rb, ..}</li>\n<li>How to insert spill code, with F = {f1, f2, ..}?\n<ul>\n<li>For the <strong>definition</strong> of the spilled value r (assignment of the value to <em>virtual register r</em>), use a feasible register f as the target register; assign fixed memory location for spilled value (spill offset @r), and store feasible register value to the address offset @r\n<div class=\"gatsby-highlight\" data-language=\"pascal\"><pre class=\"language-pascal\"><code class=\"language-pascal\">  add ra<span class=\"token punctuation\">,</span> rb <span class=\"token operator\">=</span><span class=\"token operator\">></span> f       <span class=\"token comment\">// target of operation is spilled</span>\n  storeAI f <span class=\"token operator\">=</span><span class=\"token operator\">></span> r0<span class=\"token punctuation\">,</span> <span class=\"token operator\">@</span>a   <span class=\"token comment\">// spilled value \"lives\" in memory offset @r</span></code></pre></div>\n</li>\n<li>For the <strong>use</strong> of spiled value, load value from memory into a feasible register\n<div class=\"gatsby-highlight\" data-language=\"pascal\"><pre class=\"language-pascal\"><code class=\"language-pascal\">  loadAI r0<span class=\"token punctuation\">,</span> <span class=\"token operator\">@</span>r <span class=\"token operator\">=</span><span class=\"token operator\">></span> f <span class=\"token comment\">// value lives at memory with offset @r</span>\n  add f<span class=\"token punctuation\">,</span> rb <span class=\"token operator\">=</span><span class=\"token operator\">></span> ra    <span class=\"token comment\">// loaded into feasible register</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Bottom-up Allocator</h2>\n<p>The idea:</p>\n<ul>\n<li>Focus on replacement rather than allocation</li>\n<li>Keep values “used soon” in registers</li>\n<li>Only parts of a live range may be assigned to a physical register (!= top down allocation’s “all-or-nothing” approach)</li>\n</ul>\n<p>Algorithm:</p>\n<ul>\n<li>Start with an empty register set</li>\n<li>Load on demand</li>\n<li>When no register is available, free one</li>\n</ul>\n<p>Replacement (heuristic):</p>\n<ul>\n<li>Spill the value whose next use is farthest in the future</li>\n<li>Sound familiar? Think page replacement …</li>\n</ul>","frontmatter":{"date":"February 09, 2021","slug":"/compilers/lecture-7","title":"Compilers - Lecture 7"}}},"pageContext":{"id":"cff3c051-7060-58cf-99e2-e7b6efa527f5","frontmatter__slug":"/compilers/lecture-7","__params":{"frontmatter__slug":"compilers"}}},
    "staticQueryHashes": ["1727495174"]}