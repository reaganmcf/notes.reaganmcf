{
    "componentChunkName": "component---src-pages-markdown-remark-frontmatter-slug-tsx",
    "path": "/compilers/lecture-4/",
    "result": {"data":{"markdownRemark":{"html":"<h1>Lecture 4</h1>\n<h2>Instruction Scheduling (part 3)</h2>\n<p>Code:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a:  loadAI  r0,@w   => r1\nb:  add     r1,r1   => r1\nc:  loadAI  r0,@x   => r2\nd:  mult    r1,r2   => r1\ne:  loadAI  r0,@y   => r3\nf:  mult    r1,r3   => r1\ng:  loadAI  r0,@z   => r2\nh:  mult    r1,r2   => r1\ni:  storeAI r1      => r0,@w</code></pre></div>\n<p>Note: <code class=\"language-text\">store</code> can cause aliasing issue, so for our projects we will always use <code class=\"language-text\">storeAI</code></p>\n<h2>Local (forward) List Scheduling</h2>\n<h3>Step 1. Build the dependence graph</h3>\n<p><img src=\"https://i.gyazo.com/7a9f2b41f84c06bc92953ff72a44b5ea.png\" alt=\"\"></p>\n<h3>Step 2. Determine priorities</h3>\n<ul>\n<li>Find the <strong>longest latency-weighted path</strong></li>\n</ul>\n<p><img src=\"https://i.gyazo.com/65035c52f5e89b69dee12d348c53b478.png\" alt=\"\"></p>\n<h3>Example</h3>\n<ul>\n<li>You can schedule the instructions efficiently by prioritizing scheduling instructions in the critical path</li>\n<li>Instructions that can be queued are stored in the Ready Set</li>\n<li>Instructions that are currently queued are in the Active Set</li>\n<li>You then traverse the graph, using the sets, and can generate more efficient, faster code.</li>\n</ul>\n<p>Example:</p>\n<table>\n<thead>\n<tr>\n<th>Cycle</th>\n<th>Ready Set</th>\n<th>Active Set</th>\n<th>What happened</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>a, c, e</td>\n<td></td>\n<td>Move a to active set</td>\n</tr>\n<tr>\n<td>0</td>\n<td>c,e</td>\n<td>a</td>\n<td></td>\n</tr>\n<tr>\n<td>1</td>\n<td>e</td>\n<td>a, c</td>\n<td>Move c to active set</td>\n</tr>\n<tr>\n<td>2</td>\n<td></td>\n<td>a, c, e</td>\n<td>Move e to active set</td>\n</tr>\n<tr>\n<td>3</td>\n<td></td>\n<td>b, c, e</td>\n<td>Remove a from active set since it has finished, and add b to the ready set since it depended on a. Move b to active set</td>\n</tr>\n<tr>\n<td>4</td>\n<td></td>\n<td>d, e</td>\n<td>Remove b and c from active set since they have finished, and add d to the ready set since it depended on b. Move d to the active set</td>\n</tr>\n<tr>\n<td>5</td>\n<td></td>\n<td>d</td>\n<td>Remove e from the active set since it has finished. We can’t add f yet since it’s still waiting on d</td>\n</tr>\n<tr>\n<td>6</td>\n<td>f</td>\n<td>g</td>\n<td>Remove d form the active set, and add f <strong>and</strong> g to the ready set. We schedule g first because it has a higher latency-weighted path.</td>\n</tr>\n<tr>\n<td>7</td>\n<td></td>\n<td>g, f</td>\n<td>Move f to the active set</td>\n</tr>\n<tr>\n<td>8</td>\n<td></td>\n<td>g, f</td>\n<td>Nothing we can do here</td>\n</tr>\n<tr>\n<td>9</td>\n<td></td>\n<td>h</td>\n<td>Remove g and f from the active set since they have both finished. Add h to the ready set, and move it to the active set.</td>\n</tr>\n<tr>\n<td>10</td>\n<td></td>\n<td>h</td>\n<td>Nothing to do, waiting on h to finish</td>\n</tr>\n<tr>\n<td>11</td>\n<td></td>\n<td></td>\n<td>Remove h from the active set, and add i to the ready set. Move i to the active set</td>\n</tr>\n<tr>\n<td>12</td>\n<td></td>\n<td></td>\n<td>Nothing to do, waiting on i to finish</td>\n</tr>\n</tbody>\n</table>\n<h4>Generated Code</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">0:  a: loadAI r0,@w => r1\n1:  c: loadAI r0,@x => r2\n2:  e: loadAI r0,@y => r3\n3:  b: add    r1,r1 => r1\n4:  d: mult   r1,r2 => r1\n5:\n6:  g: loadAI r0,@z => r2\n7:  f: mult   r1,r3 => r1\n8:\n9:  h: mult   r1,r2 => r1\n10:\n11: i: storeAI r1 => r0,@w\n12:</code></pre></div>\n<p>By using the dependency graph and List scheduling, we turned 20 cycles into 14!</p>\n<h3>Algorithm</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Cycle &lt;- 0\nReady &lt;- leaves of P\nActive &lt;- empty\n\nwhile (Ready ∪ Active != empty)\n  if (Ready != empty) then\n    remove an op from Ready\n    S(op) &lt;- Cycle\n    Active &lt;- Active ∪ op\n\n  Cycle &lt;- Cycle + 1\n\n  for each op ∈ Active\n    if (S(op) + delay(op) &lt;= Cycle) then\n      remove op from Active\n      for each successor s of op in P\n        if (s is ready) then\n          Ready &lt;- Ready ∪ s</code></pre></div>\n<h3>Formalisms</h3>\n<ul>\n<li>A <strong>correct schedule</strong> maps each <em>n in N</em> into a non-negative integer representing its <strong>cycle number</strong> such that</li>\n</ul>\n<ol>\n<li><em>S(n) >= 0</em>, for all <em>n in N</em> (obviously)</li>\n<li>If <em>(n1, n2) in E, S(n1) + delay(n1) &#x3C;= S(n2)</em></li>\n<li>For each type <em>t</em>, there are no more operations of type <em>t</em> in any cycle than the target machine can issue</li>\n</ol>\n<p>The length of a schedule <em>S</em>, denoted <em>L(S)</em>, is:</p>\n<ul>\n<li><em>L(S) = max(n in N)(S(n) + delay(n))</em></li>\n</ul>\n<p>The goal is to find the shortest possible correct schedule.\n<em>S</em> is <strong>time-optimal</strong> if <em>L(S) &#x3C;= L(S1)</em>, for all other schedules S1.</p>\n<p>Note: We are trying to minimize execution time here.</p>\n<h3>What’s so difficult?</h3>\n<p>Critical points</p>\n<ul>\n<li>All operands must be available</li>\n<li>Multiple operations can be <em>ready</em></li>\n<li>Operands have multiple predecessors\nTogether, these issues make scheduling <em>hard</em> (NP-Complete)</li>\n</ul>\n<p>Local scheduling is the simple case</p>\n<ul>\n<li>Restricted to straight-line code (single basic block)</li>\n<li>Consistent and predictable latencies</li>\n</ul>","frontmatter":{"date":"January 31, 2021","slug":"/compilers/lecture-4","title":"Compilers - Lecture 4"}}},"pageContext":{"id":"883bd687-477d-502d-ae4c-2d6015c24997","frontmatter__slug":"/compilers/lecture-4","__params":{"frontmatter__slug":"compilers"}}},
    "staticQueryHashes": ["1727495174"]}