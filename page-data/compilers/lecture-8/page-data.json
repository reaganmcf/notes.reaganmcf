{
    "componentChunkName": "component---src-pages-markdown-remark-frontmatter-slug-tsx",
    "path": "/compilers/lecture-8/",
    "result": {"data":{"markdownRemark":{"html":"<h1>Lecture 8</h1>\n<h2>Bottom-up Allocator</h2>\n<p>The idea:</p>\n<ul>\n<li>Focus on replacement rather than allocation</li>\n<li>Keep values “used soon” in registers</li>\n<li>Only parts of a live range may be assigned to a physical register (!= top -down allocation’s “all-or-nothing” approach)</li>\n</ul>\n<p>Algorithm:</p>\n<ul>\n<li>Start with empty register set</li>\n<li>Load on demand</li>\n<li>When no register is available, free one</li>\n</ul>\n<p>Replacement (heuristic): 1</p>\n<ul>\n<li>Spill the value whose next use is <strong>farthest in the future</strong></li>\n<li>Sound familiar? Think page replacement</li>\n</ul>\n<h3>Example:</h3>\n<div class=\"gatsby-highlight\" data-language=\"pascal\"><pre class=\"language-pascal\"><code class=\"language-pascal\">loadI   <span class=\"token number\">1028</span>    <span class=\"token operator\">=</span><span class=\"token operator\">></span> r1 <span class=\"token comment\">// r1</span>\nload    r1      <span class=\"token operator\">=</span><span class=\"token operator\">></span> r2 <span class=\"token comment\">// r1 r2</span>\nmult    r1<span class=\"token punctuation\">,</span>r2   <span class=\"token operator\">=</span><span class=\"token operator\">></span> r3 <span class=\"token comment\">// r1 r2 r3</span>\nloadI   <span class=\"token number\">5</span>       <span class=\"token operator\">=</span><span class=\"token operator\">></span> r4 <span class=\"token comment\">// r1 r2 r3 r4</span>\nsub     r4<span class=\"token punctuation\">,</span>r2   <span class=\"token operator\">=</span><span class=\"token operator\">></span> r5 <span class=\"token comment\">// r1    r3    r5</span>\nloadI   <span class=\"token number\">8</span>       <span class=\"token operator\">=</span><span class=\"token operator\">></span> r6 <span class=\"token comment\">// r1    r3    r5 r6</span>\nmult    r5<span class=\"token punctuation\">,</span>r6   <span class=\"token operator\">=</span><span class=\"token operator\">></span> r7 <span class=\"token comment\">// r1    r3          r7</span>\nsub     r7<span class=\"token punctuation\">,</span>r3   <span class=\"token operator\">=</span><span class=\"token operator\">></span> r8 <span class=\"token comment\">// r1                   r8</span>\nstore   r8      <span class=\"token operator\">=</span><span class=\"token operator\">></span> r1 <span class=\"token comment\">//</span></code></pre></div>\n<p><img src=\"https://i.gyazo.com/9340d8554a9f0b69d1eea44848a0bfb6.png\" alt=\"\"></p>\n<p><img src=\"https://i.gyazo.com/96a2249c1102edfa29869c9422f8deca.png\" alt=\"\"></p>\n<p><img src=\"https://i.gyazo.com/bbe1dddcc6183bf2451e5842030252c3.png\" alt=\"\"></p>\n<p><img src=\"https://i.gyazo.com/b9510f2ca287a87509526782f61ce6d5.png\" alt=\"\"></p>\n<p><img src=\"https://i.gyazo.com/3f476acf0af98b5967ffeea018bf0a89.png\" alt=\"\"></p>\n<p><img src=\"https://i.gyazo.com/6d21ac1dcb988543841a6b97ce4353f7.png\" alt=\"\"></p>\n<h3>Spilling revisited</h3>\n<p><strong>Rematerialization</strong>: Re-computation is cheaper than store/load to memory</p>\n<p><img src=\"https://i.gyazo.com/7f0513ffafd97dd8fc5b70d475cae7b3.png\" alt=\"\"></p>\n<h4>Bottom-up spilling revisited</h4>\n<p>Source code example</p>\n<div class=\"gatsby-highlight\" data-language=\"pascal\"><pre class=\"language-pascal\"><code class=\"language-pascal\"><span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token number\">1</span>    add  r1<span class=\"token punctuation\">,</span>r2 <span class=\"token operator\">=</span><span class=\"token operator\">></span> r3\n<span class=\"token number\">2</span>    add  r4<span class=\"token punctuation\">,</span>r5 <span class=\"token operator\">=</span><span class=\"token operator\">></span> r6\n<span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\nx  need <span class=\"token keyword\">to</span> spill either r3 <span class=\"token operator\">or</span> r6<span class=\"token punctuation\">;</span> both used farthest <span class=\"token operator\">in</span> the future\n<span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\ny    add r3<span class=\"token punctuation\">,</span>r6 <span class=\"token operator\">=</span><span class=\"token operator\">></span> r27</code></pre></div>\n<p>Should r3 or r6 be spilled before instruction x (Assume neither register value can be materialized)</p>\n<p>What if r3 has been spilled before instruction x, but r6 has not?\nSpilling <strong>clean</strong> register (<em>r3</em>) avoids storing value of <strong>dirty</strong> register (<em>r6</em>)</p>\n<h1>The Front End</h1>\n<p><img src=\"https://i.gyazo.com/480757307fae6840a0861f14e691d2fc.png\" alt=\"\"></p>\n<p>The purpose of the front end is to deal with the input language</p>\n<ul>\n<li>Perform a membership test: code $\\in$ source language?</li>\n<li>Is the program well-formed (semantically)?</li>\n<li>Build an IR version of the code for the rest of the compiler</li>\n</ul>\n<p><em>The front end is not monolithic</em></p>\n<h2>Scanner</h2>\n<ul>\n<li>Maps stream of characters into words / tokens\n<ul>\n<li>Basic unit of syntax</li>\n<li><code class=\"language-text\">x = x + y;</code> becomes <code class=\"language-text\">&lt;id, x>&lt;eq, =>&lt;id,x>&lt;pl,+>&lt;id,y>&lt;sc,;></code></li>\n</ul>\n</li>\n<li>Character sequence that forms a word/token is its <strong>lexeme</strong></li>\n<li>Its <em>part of speech</em> or (<em>syntactic category</em>) is called its <strong>token type</strong></li>\n<li>Scanner discards white space &#x26; (often) comments</li>\n<li>Speed is often an issue in scanning => use a specialized recognizer</li>\n</ul>\n<h2>Parser</h2>\n<ul>\n<li>Checks stream of classified words (tokens) for grammatical correctness</li>\n<li>Determines if code is syntactically well-formed</li>\n<li>Guides checking at deeper levels than syntax (static semantics)</li>\n<li>Builds an IR representation of the code</li>\n</ul>","frontmatter":{"date":"February 14, 2021","slug":"/compilers/lecture-8","title":"Compilers - Lecture 8"}}},"pageContext":{"id":"3c567790-d4d7-5f1e-9e51-f0707e09e4f5","frontmatter__slug":"/compilers/lecture-8","__params":{"frontmatter__slug":"compilers"}}},
    "staticQueryHashes": ["1727495174"]}