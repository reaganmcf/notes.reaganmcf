{
    "componentChunkName": "component---src-pages-markdown-remark-frontmatter-slug-tsx",
    "path": "/compilers/lecture-3/",
    "result": {"data":{"markdownRemark":{"html":"<h1>Lecture 3</h1>\n<h2>Instruction Scheduling (Engineerâ€™s View)</h2>\n<p>The Problem:</p>\n<p>Given a code fragment (basic block) for some target machine and the latencies for each individual operation, reorder the operations to minimize execution time</p>\n<p>The Concept:\n<img src=\"https://i.gyazo.com/1cde9187be726f4a63026b351963667a.png\" alt=\"\"></p>\n<p>The Task:</p>\n<ul>\n<li>Produce correct code</li>\n<li>Minimize wasted (idle) cycles</li>\n<li>Scheduler operates efficiently</li>\n</ul>\n<h2>Data Dependencies (stmt./instr. level)</h2>\n<p>Dependencies => defined on memory locations / registers</p>\n<p>Statement / instruction <code class=\"language-text\">b</code> depends on statement / instruction <code class=\"language-text\">a</code> if there exists:</p>\n<p>RAW = Read after Write\nWAR = Write after Read\nWAW = Write after Write</p>\n<ul>\n<li>\n<p><em>true</em> of flow dependence</p>\n<ul>\n<li><code class=\"language-text\">a</code> writes a location / register that <code class=\"language-text\">b</code> later reads <strong>(RAW conflict)</strong></li>\n</ul>\n</li>\n<li>\n<p><em>anti</em> dependence</p>\n<ul>\n<li><code class=\"language-text\">a</code> reads a location / register that <code class=\"language-text\">b</code> later writes <strong>(WAR conflict)</strong></li>\n</ul>\n</li>\n<li>\n<p><em>output</em> dependence</p>\n<ul>\n<li><code class=\"language-text\">a</code> writes a location / register that <code class=\"language-text\">b</code> later writes <strong>(WAW conflict)</strong></li>\n</ul>\n</li>\n</ul>\n<p>Dependencies defines ORDER CONSTRAINTS that need to be respected in order to generate correct code.</p>\n<p><img src=\"https://i.gyazo.com/48a219e9482c95b6728ef9801c305db1.png\" alt=\"\"></p>\n<h2>Precedence / Dependence Graphs</h2>\n<h4>Example latencies</h4>\n<p><img src=\"https://i.gyazo.com/29e71dc93d2c9cedca1835afb2a160d0.png\" alt=\"\"></p>\n<p>To capture properties of the code, build a <strong>precedence/dependence graph</strong> <em>G</em></p>\n<ul>\n<li>Nodes n in G are operations with <em>type(n)</em> and <em>delay(n)</em></li>\n<li>An edge <em>e = (n1, n2) in G</em> if <em>n2</em> depends on <em>n1</em></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a:  loadAI  r0,@w   => r1\nb:  add     r1,r1   => r1\nc:  loadAI  r0,@x   => r2\nd:  mult    r1,r2   => r1\ne:  loadAI  r0,@y   => r3\nf:  mult    r1,r3   => r1\ng:  loadAI  r0,@z   => r2\nh:  mult    r1,r2   => r1\ni:  storeAI r1      => r0,@w</code></pre></div>\n<p>The Precedence Graph</p>\n<p><img src=\"https://i.gyazo.com/2a8eb1d60c08bb643f1ea05e80a246df.png\" alt=\"\"></p>\n<p>All other dependencies (output &#x26; anti) are covered, i.e., are satisfied through the dependencies shown</p>\n<h2>The Big Picture</h2>\n<ol>\n<li>Build a dependency graph, <em>P</em></li>\n<li>Compute a <em>priority function</em> over the nodes in <em>P</em></li>\n<li>Use <strong>list scheduling</strong> to construct a schedule, one cycle at a time</li>\n</ol>\n<ul>\n<li>Can only issue / schedule at most one instructions per cycle</li>\n<li>Use a set of operations that are ready</li>\n<li>At each cycle\n<ol>\n<li>Choose a ready operation (priority based) and schedule it</li>\n<li>Increment cycle</li>\n<li>Update the ready set</li>\n</ol>\n</li>\n</ul>\n<p>Local list scheduling</p>\n<ul>\n<li>The dominant algorithm for many years</li>\n<li>A greedy, heuristic, local technique</li>\n</ul>\n<h2>Scheduling Example</h2>\n<ol>\n<li>\n<p>Build the dependency graph (using the same one as above)</p>\n</li>\n<li>\n<p>Determine priorities: longest latency-weighted path</p>\n</li>\n</ol>\n<p><img src=\"https://i.gyazo.com/ed13d76ecd14a54496d1db1d3205940c.png\" alt=\"\"></p>","frontmatter":{"date":"January 26, 2021","slug":"/compilers/lecture-3","title":"Compilers - Lecture 3"}}},"pageContext":{"id":"35412586-4de4-54e6-9264-8719761246fd","frontmatter__slug":"/compilers/lecture-3","__params":{"frontmatter__slug":"compilers"}}},
    "staticQueryHashes": ["1727495174"]}