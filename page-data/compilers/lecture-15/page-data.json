{
    "componentChunkName": "component---src-pages-markdown-remark-frontmatter-slug-tsx",
    "path": "/compilers/lecture-15/",
    "result": {"data":{"markdownRemark":{"html":"<h1>Lecture 15 - Bottom-up Parsing</h1>\n<h2>Bottom-up parsers</h2>\n<p>LR(1), operator precedence</p>\n<ul>\n<li>L => Input: read left-to-right</li>\n<li>R => Construct rightmost derivation</li>\n<li>(1) => 1 input symbol look ahead</li>\n</ul>\n<p><img src=\"https://i.gyazo.com/b89d5068b67e7faedaaf93923ad0be1c.png\" alt=\"\"></p>\n<h2>LR(1) Parser Example</h2>\n<p>Is the following grammar LL(1), LL(2), or LR(1)?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">S ::= a b | a b c</code></pre></div>\n<p>Is the following grammar LR(1) or even LR(0)?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">S ::= a S b | c</code></pre></div>\n<p>Basic idea:</p>\n<p><strong>shift</strong> symbols from input onto the stack until top of the stack is a RHS of a rule; if so, “apply” rule backwards (reduce) by replacing top of the stack by the LHS non-terminal.</p>\n<p>Challenge: when to shift, and when to reduce.</p>\n<h3>Example 1</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">S' -> S\nS -> a S b\nS -> c</code></pre></div>\n<p>Input: <code class=\"language-text\">aaacbbb</code></p>\n<p>We can describe our states as:</p>\n<table>\n<thead>\n<tr>\n<th>State</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>s0</td>\n<td>[S’ -> .S], [S -> .aSb], [S -> .c]</td>\n</tr>\n<tr>\n<td>s1</td>\n<td>[S -> a.Sb], [S -> .aSb], [S -> .c]</td>\n</tr>\n<tr>\n<td>s2</td>\n<td>[S -> aS.b]</td>\n</tr>\n<tr>\n<td>s3</td>\n<td>[S -> aSb.]</td>\n</tr>\n<tr>\n<td>s4</td>\n<td>[S -> c.]</td>\n</tr>\n<tr>\n<td>accept</td>\n<td>[S’ -> S.]</td>\n</tr>\n</tbody>\n</table>\n<p>Our transition table can be the following:</p>\n<table>\n<thead>\n<tr>\n<th>State</th>\n<th>a</th>\n<th>S</th>\n<th>b</th>\n<th>c</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>s0</td>\n<td>s1</td>\n<td>accept</td>\n<td></td>\n<td>s4</td>\n</tr>\n<tr>\n<td>s1</td>\n<td>s1</td>\n<td>s2</td>\n<td></td>\n<td>s4</td>\n</tr>\n<tr>\n<td>s2</td>\n<td></td>\n<td></td>\n<td>s3</td>\n<td></td>\n</tr>\n<tr>\n<td>s3</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>s4</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>accept</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>This is actually a <strong>LR(0) grammar if we can prove we don’t need to look ahead at all!</strong></p>\n<p>But, when do we shift or reduce? Let’s build an action table</p>\n<table>\n<thead>\n<tr>\n<th>State</th>\n<th>Action</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>s0</td>\n<td>shift</td>\n</tr>\n<tr>\n<td>s1</td>\n<td>shift</td>\n</tr>\n<tr>\n<td>s2</td>\n<td>shift</td>\n</tr>\n<tr>\n<td>s3</td>\n<td>reduce</td>\n</tr>\n<tr>\n<td>s4</td>\n<td>reduce</td>\n</tr>\n</tbody>\n</table>\n<p>We can now try to parse <code class=\"language-text\">aaacbbb eof</code></p>\n<table>\n<thead>\n<tr>\n<th>Step</th>\n<th>Input Read</th>\n<th>Stack</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>eof</td>\n<td>[eof, s0]</td>\n</tr>\n<tr>\n<td>1</td>\n<td>a</td>\n<td>[eof, s0, a, s1]</td>\n</tr>\n<tr>\n<td>2</td>\n<td>a</td>\n<td>[eof, s0, a, s1, a, s1]</td>\n</tr>\n<tr>\n<td>3</td>\n<td>a</td>\n<td>[eof, s0, a, s1, a, s1, a, s1]</td>\n</tr>\n<tr>\n<td>4</td>\n<td>c</td>\n<td>[eof, s0, a, s1, a, s1, a, s1, c, s4]</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>[eof, s0, a, s1, a, s1, a, s1, S, s4]</td>\n</tr>\n<tr>\n<td>5</td>\n<td>b</td>\n<td>[eof, s0, a, s1, a, s1, a, s1, S, s4, b, s3]</td>\n</tr>\n<tr>\n<td>…</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>","frontmatter":{"date":"March 21, 2021","slug":"/compilers/lecture-15","title":"Compilers - Lecture 15"}}},"pageContext":{"id":"69faf78e-48fe-5b32-ab64-441d8abd96d5","frontmatter__slug":"/compilers/lecture-15","__params":{"frontmatter__slug":"compilers"}}},
    "staticQueryHashes": ["1727495174"]}